%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "absyn.h"
#include "errormsg.h"
int yylex(void); /* function prototype */
 A_exp absyn_root = NULL;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}

void log(char *s)
{
	printf("log: %s\n", s);
}

%}


%union {
	int pos;
	int ival;
	string sval;
	S_symbol symbol;
	A_var var;
	A_exp exp;
	A_expList expList;
	A_oper op;
    A_decList decList;
	A_fundecList fundecList;
	A_fundec fundec;
	A_dec dec;
	A_efieldList efieldList;
	A_fieldList fieldList;
	A_efield efield;
	A_field field;
	A_nametyList nametyList;
	A_namety namety;

	A_ty ty;
	}

%token <sval> ID STRING
%token <ival> INT

%type <symbol> symbol
%type <var> var
%type <exp> exp
%type <exp> varExp
%type <exp> breakExp
%type <exp> forExp
%type <exp> whileExp
%type <exp> letExp
%type <exp> recordExp
%type <exp> assignExp
%type <exp> ifExp
%type <exp> seqExp
%type <exp> arrayExp
%type <exp> callExp

%type <ty> type

%type <expList> expList
%type <op> op
%type <decList> decList
%type <dec> dec
%type <nametyList> nametyList
%type <namety> namety
%type <efieldList> efieldList
%type <fieldList> fieldList
%type <efield> efield
%type <field> field
%type <expList> letExpList
%type <fundec> fundec
%type <fundecList> fundecList
%type <dec> functionDec
%type <dec> varDec
%type <dec> typeDec


%token 

    COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE UMINUS



%nonassoc LOWER
%nonassoc OF
%nonassoc IF THEN WHILE DO FOR TO
%nonassoc ASSIGN
%left OR AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS 
%left TIMES DIVIDE
%%

program:	exp{
	absyn_root = $1;
};

exp
:	varExp {
	$$ = $1;
}
|   exp op exp {
	printf("op  ");
	$$ = A_OpExp(0, $2, $1, $3);
}
|	NIL {
	$$ = A_NilExp(0);
}
|   INT {
	// printf("int %d", $1);
	$$ = A_IntExp(0, $1);
}	

|	STRING {
	$$ = A_StringExp(0, $1);
}
|	letExp {
	$$ = $1;
}
|	recordExp {
	$$ = $1;
}	
|	assignExp {
	$$ = $1;
}	
|	callExp	{
	$$ = $1;

}
|	ifExp {
	$$ = $1;

}
|	seqExp {
	$$ = $1;

}
|	LPAREN exp RPAREN {
	$$ = $2;

}
| 	whileExp {
	$$ = $1;

}
| 	forExp {
	$$ = $1;

}
|	breakExp {
	$$ = $1;

}
|	MINUS exp %prec UMINUS{

	$$ = A_OpExp(0, MINUS, A_IntExp(0, 0), $2);
	log("UMINUS");
}
|	arrayExp{
	$$ = $1;
}
|	exp OR exp {
	$$ = A_IfExp(0, $1, A_IntExp(0,1), $3);
}
|	exp AND exp {
	$$ = A_IfExp(0, $1, $3, A_IntExp(0,1));
	
}
// -----------------------------------------------
seqExp
:	LPAREN letExpList RPAREN {
	log("seqExp");
	$$ = A_SeqExp(0, $2);
};
breakExp
:	BREAK {
	$$ = A_BreakExp(0);
}

forExp
:	FOR symbol ASSIGN exp TO exp DO exp{
	$$ = A_ForExp(0, $2, $4, $6, $8);
}
whileExp
:	WHILE exp DO exp{
	$$ = A_WhileExp(0, $2, $4);
}

ifExp
: 	IF exp THEN exp ELSE exp  {
	$$ = A_IfExp(0, $2, $4, $6);
	
}
| 	IF exp THEN exp {
	$$ = A_IfExp(0, $2, $4, NULL);
}



op 
:	PLUS {
	$$ = PLUS;
}
|	MINUS {
	$$ =MINUS;
}
|	TIMES {
	$$ =TIMES;

}
|	DIVIDE {
	$$ =DIVIDE;

}
|	EQ	{
	$$ =EQ;

}
|	NEQ {
	$$ =NEQ;

}
|	LT {
	$$ =LT;

}
|	LE {
	$$ =LE;

}	
|	GT {
	$$ = GT;

}
|	GE{
	$$ = GE;

}



callExp
:	symbol LPAREN expList RPAREN {
	printf("call ok");
	$$ = A_CallExp(0, $1, $3);
}

varExp
:	var {
	$$ = A_VarExp(0, $1);
}

letExpList 
:	{
	$$ = NULL;
}
|	exp {
	$$ = A_ExpList($1, NULL);
}
|	exp SEMICOLON letExpList {
	$$ = A_ExpList($1, $3);
}

expList 
:	{
	$$ = NULL;
}
|	exp {
	$$ = A_ExpList($1, NULL);

}
|	exp COMMA expList {
	$$ = A_ExpList($1, $3);
	
}

assignExp
:	var ASSIGN exp {
	$$ = A_AssignExp(0, $1, $3);
}

recordExp
:	symbol LBRACE efieldList RBRACE{
	$$ = A_RecordExp(0, $1, $3);
	
}
arrayExp
:   LBRACK exp RBRACK OF exp COLON symbol{
	log("arrayE");
	$$ = A_ArrayExp(0, $7, $2, $5);
}

letExp
: LET decList IN letExpList END{
	$$ = A_LetExp(0, $2, A_SeqExp(0,$4));
	printf("\nlet\n");

}

decList

: 	dec{
	$$ = A_DecList($1, NULL);
}
| 	dec decList {
	$$ = A_DecList($1, $2);
}


dec
: 	varDec {
	$$ =$1;
}
|	typeDec {
	$$ =$1;
}
|	functionDec {
	$$ =$1;
}


typeDec
: nametyList{
	$$ = A_TypeDec(0, $1);
	log("TYPE DEC OK");
}
functionDec
:	 fundecList{
	
	$$ = A_FunctionDec(0, $1);
	
	//TODO
	log("fun ok");
}

fundecList
:	fundec{
	$$ = A_FundecList($1, NULL);
}
|	fundec  fundecList{
	$$ = A_FundecList($1, $2);
}
fundec
:   FUNCTION symbol LPAREN fieldList RPAREN COLON symbol 
 EQ exp{
	$$ = A_Fundec(0, $2, $4, $7, $9);
 	log("fundec");
}
|	FUNCTION symbol LPAREN fieldList RPAREN EQ exp{
	$$ = A_Fundec(0, $2, $4, NULL, $7);
 	log("fundec");

}
varDec 
:	VAR symbol COLON symbol ASSIGN exp {
	$$ = A_VarDec(0, $2, $4, $6);
	printf("varDec \n");
}
| 	VAR symbol ASSIGN exp {
	$$ = A_VarDec(0, $2, NULL, $4);
	printf("varDec \n");
}

nametyList 
:	namety  {
	$$ = A_NametyList($1, NULL);
}
|	namety nametyList {
	$$ =A_NametyList($1, $2);
}

namety
:	TYPE symbol EQ type{
	$$ = A_Namety($2, $4);
}

type 
:   symbol {
	$$ = A_NameTy(0, $1);
}
|	ARRAY OF symbol {
	$$ = A_ArrayTy(0, $3);
}	
|	LBRACE fieldList RBRACE{
	$$ = A_RecordTy(0, $2);
} 


fieldList
:	{
	$$ = NULL;

}
|	field {
	$$ = A_FieldList($1, NULL);

}
|	field COMMA fieldList {
	$$ = A_FieldList($1, $3);
}

field
:	symbol COLON symbol {
	$$ = A_Field(0, $1, $3);
}

efieldList
:{
	$$ = NULL;
	
}
|	efield {
	$$ = A_EfieldList($1, NULL);
}
|	efield COMMA efieldList {
	$$ = A_EfieldList($1, $3);
}

efield
:	symbol EQ exp {
	$$ = A_Efield($1, $3);
}


var 
:	var DOT symbol{
	$$ = A_FieldVar(0, $1, $3);
}
| symbol {
	$$ = A_SimpleVar(0, $1);
}
| var LBRACK exp RBRACK{
	$$ = A_SubscriptVar(0, $1, $3);
}




symbol
:	ID {
	$$ = S_Symbol($1);
}

